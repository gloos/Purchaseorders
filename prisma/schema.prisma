// Prisma schema for PO Tool
// This defines the database models and relationships

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User model - represents authenticated users
// Note: Supabase handles auth in its own schema, this is for app-specific user data
model User {
  id             String        @id @default(uuid()) // Matches Supabase auth.users.id
  email          String        @unique
  name           String?
  avatarUrl      String?
  role           UserRole      @default(VIEWER) // User's role within their organization
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])

  createdPurchaseOrders PurchaseOrder[] @relation("CreatedPOs")
  sentInvitations       Invitation[]     @relation("SentInvitations")
  projectTeamMemberships ProjectTeamMember[]
  uploadedDocuments     ProjectDocument[]

  @@map("users")
}

// Invitation model - tracks pending user invitations
model Invitation {
  id             String        @id @default(uuid())
  email          String
  role           UserRole      @default(VIEWER)
  token          String        @unique @default(uuid())
  expiresAt      DateTime
  status         InvitationStatus @default(PENDING)
  createdAt      DateTime      @default(now())
  acceptedAt     DateTime?

  // Relations
  organizationId String
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  invitedById    String
  invitedBy      User          @relation("SentInvitations", fields: [invitedById], references: [id])

  @@map("invitations")
  @@index([organizationId])
  @@index([email])
  @@index([token])
  @@unique([email, organizationId])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

// Organization model - represents companies/organizations using the tool
model Organization {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // FreeAgent OAuth tokens
  freeAgentAccessToken  String?
  freeAgentRefreshToken String?
  freeAgentTokenExpiry  DateTime?

  // Company Profile Information
  companyRegistrationNumber String?
  vatNumber                 String?
  addressLine1              String?
  addressLine2              String?
  city                      String?
  region                    String?
  postcode                  String?
  country                   String?
  phone                     String?
  email                     String?
  website                   String?
  logoUrl                   String?

  // FreeAgent company sync
  freeAgentCompanyUrl       String?
  companySyncedAt           DateTime?

  // FreeAgent Bill Creation Settings
  defaultPaymentTermsDays   Int?      @default(30)
  defaultExpenseCategoryUrl String?

  // Relations
  users          User[]
  purchaseOrders PurchaseOrder[]
  contacts       Contact[]
  counters       Counter[]
  taxRates       TaxRate[]
  expenseCategoryMappings ExpenseCategoryMapping[]
  invitations    Invitation[]
  projects       Project[]
  projectSyncLogs ProjectSyncLog[]

  @@map("organizations")
}

// Contact/Supplier model - synced from FreeAgent
model Contact {
  id                String    @id @default(uuid())
  freeAgentId       String    @unique
  name              String
  email             String?
  phone             String?
  address           String?
  isActive          Boolean   @default(true)
  syncedAt          DateTime  @default(now())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  organizationId    String
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("contacts")
  @@index([organizationId])
  @@index([freeAgentId])
}

// Tax Rate model - configurable tax rates per organization
model TaxRate {
  id             String    @id @default(uuid())
  name           String    // e.g., "UK VAT Standard Rate", "US Sales Tax - California"
  taxType        TaxType   @default(VAT)
  rate           Decimal   @db.Decimal(5, 2) // Percentage (e.g., 20.00 for 20%)
  description    String?
  region         String?   // Optional region/state for regional taxes
  isDefault      Boolean   @default(false) // Default tax rate for new POs
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  purchaseOrders PurchaseOrder[]

  @@map("tax_rates")
  @@index([organizationId])
  @@index([organizationId, isDefault])
  @@index([organizationId, isActive])
}

// User Role enum - defines access levels within an organization
enum UserRole {
  ADMIN    // Full access: manage users, settings, all POs
  MANAGER  // Can create, edit, approve, and send POs
  VIEWER   // Read-only access to POs
}

// Purchase Order Status enum
enum POStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  SENT
  RECEIVED
  INVOICED
  CANCELLED
}

// Tax Mode enum - how tax is applied to the purchase order
enum TaxMode {
  INCLUSIVE  // Tax is included in line item prices
  EXCLUSIVE  // Tax is added on top of line item prices
  NONE       // No tax applied
}

// Tax Type enum - different types of taxes
enum TaxType {
  VAT          // Value Added Tax (EU, UK, etc.)
  GST          // Goods and Services Tax (Canada, Australia, India, etc.)
  SALES_TAX    // Sales Tax (US states, etc.)
  CONSUMPTION  // Consumption Tax (Japan, etc.)
  CUSTOM       // Custom/Other tax types
}

// Purchase Order model
model PurchaseOrder {
  id             String    @id @default(uuid())
  poNumber       String    @unique
  title          String
  description    String?
  status         POStatus  @default(DRAFT)

  // Financial fields
  subtotalAmount Decimal   @default(0) @db.Decimal(10, 2) // Amount before tax
  taxMode        TaxMode   @default(EXCLUSIVE) // How tax is calculated
  taxRate        Decimal   @default(0) @db.Decimal(5, 2) // Tax percentage (e.g., 20.00 for 20%) - IMMUTABLE snapshot at PO creation time
  taxAmount      Decimal   @default(0) @db.Decimal(10, 2) // Calculated tax amount - IMMUTABLE snapshot for accounting history
  totalAmount    Decimal   @db.Decimal(10, 2) // Final amount (subtotal + tax for EXCLUSIVE, or subtotal for INCLUSIVE/NONE)
  currency       String    @default("GBP")

  // Tax Rate relation (optional reference for auditing - NEVER used for calculations)
  // This preserves a link to the TaxRate that was selected, but taxRate field above holds the actual value
  // If the TaxRate is deleted or modified, this PO's taxRate/taxAmount remain unchanged (accounting integrity)
  taxRateId      String?
  taxRateConfig  TaxRate?  @relation(fields: [taxRateId], references: [id], onDelete: SetNull)

  orderDate      DateTime  @default(now())
  deliveryDate   DateTime?
  notes          String?

  // Supplier information
  supplierName   String
  supplierEmail  String?
  supplierPhone  String?
  supplierAddress String?

  // FreeAgent integration
  freeAgentId    String?   @unique
  syncedAt       DateTime?

  // Invoice upload fields
  invoiceUploadToken          String?   @unique
  invoiceUploadTokenExpiresAt DateTime?
  invoiceUrl                  String?
  invoiceReceivedAt           DateTime?

  // FreeAgent Bill Integration
  freeAgentBillId       String?   @unique
  freeAgentBillUrl      String?
  freeAgentBillCreatedAt DateTime?
  paymentTermsDays      Int?      @default(30)
  freeAgentContactUrl   String?   // Cached matched contact URL

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdById    String
  createdBy      User      @relation("CreatedPOs", fields: [createdById], references: [id])

  projectId      String?
  project        Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)

  lineItems      POLineItem[]

  @@map("purchase_orders")
  @@unique([organizationId, poNumber]) // Ensure PO numbers are unique per organization
  @@index([organizationId, status]) // Optimize queries filtering by org and status
  @@index([organizationId, orderDate]) // Optimize queries filtering by org and date
  @@index([organizationId]) // Keep for general org queries
  @@index([projectId]) // Optimize queries filtering by project
}

// Purchase Order Line Item model
model POLineItem {
  id              String   @id @default(uuid())
  description     String
  quantity        Int
  unitPrice       Decimal  @db.Decimal(10, 2)
  totalPrice      Decimal  @db.Decimal(10, 2)
  notes           String?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)

  @@map("po_line_items")
  @@index([purchaseOrderId])
}

// Counter model - for generating sequential numbers (e.g., PO numbers)
// Uses row-level locking to prevent race conditions
model Counter {
  id             String   @id @default(uuid())
  name           String   // e.g., "po_number"
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  value          Int      @default(0)
  updatedAt      DateTime @updatedAt

  @@unique([organizationId, name])
  @@map("counters")
  @@index([organizationId])
}

// Expense Category Mapping model - stores user preferences for mapping line items to FreeAgent categories
model ExpenseCategoryMapping {
  id                    String   @id @default(uuid())
  keyword               String   // e.g., "software", "hardware", "services"
  freeAgentCategoryUrl  String   // FreeAgent category URL
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, keyword])
  @@map("expense_category_mappings")
  @@index([organizationId])
}

// Project Management Models

model Project {
  id                    String              @id @default(uuid())
  freeAgentId          String?             @unique
  name                 String
  code                 String?
  reference            String?
  status               ProjectStatus       @default(ACTIVE)
  healthStatus         ProjectHealthStatus @default(UNKNOWN)
  description          String?
  currency             String              @default("GBP")

  // Financial fields
  budget               Decimal?            @db.Decimal(10, 2)
  budgetAlertThreshold Int?               @default(75)
  totalRevenue         Decimal            @default(0) @db.Decimal(10, 2)
  totalCosts           Decimal            @default(0) @db.Decimal(10, 2)
  totalPoValue         Decimal            @default(0) @db.Decimal(10, 2)
  profitAmount         Decimal            @default(0) @db.Decimal(10, 2)
  profitMargin         Decimal            @default(0) @db.Decimal(5, 2)

  // Client information
  clientName           String?
  clientFreeAgentId    String?
  clientEmail          String?

  // Dates
  startDate            DateTime?
  endDate              DateTime?
  completedAt          DateTime?
  cancelledAt          DateTime?

  // Sync metadata
  lastSyncedAt         DateTime?
  syncError            String?
  freeAgentUrl         String?
  freeAgentCreatedAt   DateTime?
  freeAgentUpdatedAt   DateTime?

  // System fields
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  // Relations
  organizationId       String
  organization         Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  purchaseOrders       PurchaseOrder[]
  teamMembers          ProjectTeamMember[]
  milestones           ProjectMilestone[]
  documents            ProjectDocument[]

  @@map("projects")
  @@index([organizationId])
  @@index([status])
  @@index([organizationId, status])
  @@index([clientFreeAgentId])
}

model ProjectTeamMember {
  id          String   @id @default(uuid())
  projectId   String
  userId      String
  role        String?
  assignedAt  DateTime @default(now())

  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_team_members")
  @@index([projectId])
  @@index([userId])
}

model ProjectMilestone {
  id          String    @id @default(uuid())
  projectId   String
  name        String
  description String?
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_milestones")
  @@index([projectId])
}

model ProjectDocument {
  id           String   @id @default(uuid())
  projectId    String
  name         String
  url          String
  fileType     String?
  fileSize     Int?
  uploadedById String
  uploadedAt   DateTime @default(now())

  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])

  @@map("project_documents")
  @@index([projectId])
}

model ProjectSyncLog {
  id             String       @id @default(uuid())
  organizationId String
  syncType       String
  status         String
  projectsSynced Int?         @default(0)
  projectsFailed Int?         @default(0)
  errorDetails   Json?
  startedAt      DateTime     @default(now())
  completedAt    DateTime?

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("project_sync_logs")
  @@index([organizationId])
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  HIDDEN
  ON_HOLD
}

enum ProjectHealthStatus {
  HEALTHY
  WARNING
  CRITICAL
  UNKNOWN
}
